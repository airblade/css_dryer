= CssDryer -- Eliminate Repetition In Your Stylesheets

== Introduction

Cascading style sheets (CSS) are wonderful but repetitive.  Rails strongly discourages repetition, the don't repeat yourself (DRY) principle, so writing CSS feels ungainly in Rails.

There are two sources of repetition in CSS:

* nested selectors
* lack of variables

Nested selectors lead to CSS like this:

  div           { font-family: Verdana; }
  div#content   { background-color: green; }
  div#content p { color: red; }

Note the triple repetition of <code>div</code> and the double repetition of <code>#content</code>.

The lack of variables leads to CSS like this:

  .sidebar { border: 1px solid #fefefe; }
  .content { color: #fefefe; }

Note the repeated colour <code>#fefefe</code>.

The CssDryer eliminates both of these sources allowing you to write DRY, pleasing stylesheets.  The examples above become:

  <% dark_grey = '#fefefe' %>

  div {
    font-family: Verdana;
    #content {
      background-color: green;
      p { color: red; }
    }
  }

  .sidebar { border: 1 px solid <%= dark_grey %>; }
  .content { color: <%= dark_grey %>; }

Note, though, that <code>@media</code> blocks are preserved.  For example:

  @media screen, projection {
    div {font-size:100%;}
  }

is left unchanged.

The original whitespace is preserved as much as possible.

See CssDryer for more details.


== Which Selectors Are Supported?

The CssDryer handles nested descendant, child, adjacent, class, pseudo-class, attribute and id selectors.

Multiple comma separated selectors are now supported.


== Comments

Comments on nested selectors do not get 'flattened' or de-nested with their selector.  For example comment B will be left inside the html selector below:

Before:

  /* Comment A */
  html {
    /* Comment B */
    p {
      color: blue;
    }
  }

After:

  /* Comment A */
  html {
    /* Comment B */
  }
  html p {
      color: blue;
    }
  }

This is suboptimal but I hope not too inconvenient.

Please also note that commas in comments will sometimes be replaced with a space.  This is due to a shameful hack in the code that handles comma-separated selectors.


== Installation

Install in the usual Rails way.  From your application's directory:

    script/plugin install http://opensource.airbladesoftware.com/trunk/plugins/css_dryer

    
== Usage

Create a controller to serve your DRY stylesheets:

    script/generate controller stylesheets

You don't have to call it <code>stylesheets</code> but doing so lets you use Rails' <code>stylesheet_link_tag</code> helper.

Edit the controller so it looks like this:

    class StylesheetsController < ApplicationController
      before_filter :set_headers
      after_filter  { |c| c.cache_page }
      session :off
      layout nil

      private
      def set_headers
        headers['Content-Type'] = 'text/css; charset=utf-8'
      end
    end

Add this line to your routes in <code>config/routes.rb</code> (note the full stop immediately after the word <code>action</code>):

    map.connect 'stylesheets/:action.:format', :controller => 'stylesheets'

You can then put your stylesheets, DRY or otherwise, in <code>app/views/stylesheets/</code>.  Once rendered they will be cached in <code>public/stylesheets/</code>.

DRY stylesheet files should have a <code>ncss</code> extension -- think 'n' for nested.  For example, <code>site.ncss</code>.

Get them in your views with a <code>css</code> extension like this:

    <link href='/stylesheets/site.css' rel='Stylesheet' type='text/css'>

or with Rails' <code>stylesheet_link_tag</code> helper:

    <%= stylesheet_link_tag 'site' %>


== To Do

* Make set-up easier by instantiating the controller and adding the route dynamically within <code>init.rb</code>.  See Corey Johnson's code and Miles Byrne's DCSS respectively.

* Split out a separate EXAMPLES document.


== Alternatives

* RCSS[http://rubyforge.org/projects/rcss]: ERB, server-side constants, server-side classes and command line execution.  No nesting as such, though server-side classes offer a form of inheritance.

* DCSS[http://rubyforge.org/projects/dcss] (written up here[http://myles.id.au/2006/11/20/introducing-dcss/]): server-side constants, different syntax.  Descendant selectors only.

* Styleaby[http://topfunky.net/svn/plugins/styleaby/README]: creates CSS with Ruby syntax.  "An experimental, unauthorized mashup of Scott Barron's stillborn Builder::CSS templates and Why The Lucky Stiff's Markaby templates."

* {Dirt Simple .rcss Templates}[http://blog.hasmanythrough.com/2006/3/23/dirt-simple-rcss-templates] by Josh Susser.  No nesting, just variables.


== Credits

The idea came from John Nunemaker on {Rails Tips}[http://railstips.org/2006/12/7/styleaby-css-plugin/].  John beta-tested the code, provided a test case for @media blocks and suggested the controller's body.  Thanks John!

The caching code is based on Topfunky's[http://topfunky.net/svn/plugins/styleaby/lib/stylesheets_controller.rb].

Changing the controller's name to <code>stylesheets</code>, thus allowing one to use Rails' <code>stylesheet_link_tag</code> helper, occurred to me while reading Josh Susser's {Dirt Simple .rcss Templates}[http://blog.hasmanythrough.com/2006/3/23/dirt-simple-rcss-templates].  Once I noticed it, I realised everybody was using a <code>StylesheetsController</code>.  Doh!


== Author

{Andrew Stewart}[mailto:boss@airbladesoftware.com], {AirBlade Software}[http://airbladesoftware.com]


== Licence

CssDryer is available under the MIT licence.  See MIT-LICENCE for the details.

Copyright (c) 2006 Andrew Stewart
